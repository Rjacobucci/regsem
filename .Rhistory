SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading.mod.res <- cfa(SIloading.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIloading.mod.res, fit=T)
SIloading.mod <-'
pastMonth =~ NA*SI_1_Month +a*SI_1_Month + a*SI_2_Month + a*SI_3_Month + a*SI_4_Month
pastYear =~ NA*SI_1_Yr + b*SI_1_Yr + b*SI_2_Yr + b*SI_3_Yr + b*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c*SI_1_Lft + c*SI_2_Lft + c*SI_3_Lft + c*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading.mod.res <- cfa(SIloading.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIloading.mod.res, fit=T)
SIloading.mod.res <- cfa(SIloading.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIloading.mod.res, fit=T)
#intercept fixed to 0; factor loadings and thresholds allowed to vary
SIbaseline.mod.res <- cfa(SIbaseline.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIbaseline.mod.res, fit=T) #does not appear to be invariant
modindices(SIbaseline.mod.res)
SIthreshold.mod <-'
pastMonth =~ NA*SI_1_Month +a*SI_1_Month + a*SI_2_Month + a*SI_3_Month + a*SI_4_Month
pastYear =~ NA*SI_1_Yr + b*SI_1_Yr + b*SI_2_Yr + b*SI_3_Yr + b*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c*SI_1_Lft + c*SI_2_Lft + c*SI_3_Lft + c*SI_4_Lft
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr1Mth * t1
SI_3_Month | thr1Mth * t1
SI_4_Month | thr1Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr1Yr * t1
SI_3_Yr | thr1Yr * t1
SI_4_Yr | thr1Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr1L * t1
SI_3_Lft | thr1L * t1
SI_4_Lft | thr1L * t1
'
SIthreshold.mod.res <- cfa(SIthreshold.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
SIthreshold.mod <-'
pastMonth =~ NA*SI_1_Month +a*SI_1_Month + a*SI_2_Month + a*SI_3_Month + a*SI_4_Month
pastYear =~ NA*SI_1_Yr + b*SI_1_Yr + b*SI_2_Yr + b*SI_3_Yr + b*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c*SI_1_Lft + c*SI_2_Lft + c*SI_3_Lft + c*SI_4_Lft
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month | thr1Mth * t1
SI_2_Month | thr1Mth * t1
SI_3_Month | thr1Mth * t1
SI_4_Month | thr1Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr1Yr * t1
SI_3_Yr | thr1Yr * t1
SI_4_Yr | thr1Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr1L * t1
SI_3_Lft | thr1L * t1
SI_4_Lft | thr1L * t1
'
SIthreshold.mod.res <- cfa(SIthreshold.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIthreshold.mod.res, fit=T)
anova(SIthreshold.mod.res, SIloading.mod.res) #fits much worse than just the loading invariant model
anova(SIbaseline.mod.res, SIloading.mod.res) #fits significantly worse
### Model w/ seriously item constrained equal and non serious constrained equal
SIloading2.mod <-'
pastMonth =~ NA*SI_1_Month + a1*SI_1_Month + a1*SI_2_Month + a2*SI_3_Month + a2*SI_4_Month
pastYear =~ NA*SI_1_Yr + b1*SI_1_Yr + b1*SI_2_Yr + b2*SI_3_Yr + b2*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c1*SI_1_Lft + c1*SI_2_Lft + c2*SI_3_Lft + c2*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading2.mod.res <- cfa(SIloading2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
### Model w/ seriously item constrained equal and non serious constrained equal
SIloading2.mod <-'
pastMonth =~ NA*SI_1_Month + a1*SI_1_Month + a1*SI_2_Month + a2*SI_3_Month + a2*SI_4_Month
pastYear =~ NA*SI_1_Yr + b1*SI_1_Yr + b1*SI_2_Yr + b2*SI_3_Yr + b2*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c1*SI_1_Lft + c1*SI_2_Lft + c2*SI_3_Lft + c2*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading2.mod.res <- cfa(SIloading2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIloading2.mod.res, fit=T)
anova(SIbaseline.mod.res, SIloading2.mod.res) #fit not significantly worse than baseline
# loadings & thresholds  contrained w/in - w/o serious items
SIthreshold2.mod <- '
pastMonth =~ NA*SI_1_Month + a1*SI_1_Month + a1*SI_2_Month + a2*SI_3_Month + a2*SI_4_Month
pastYear =~ NA*SI_1_Yr + b1*SI_1_Yr + b1*SI_2_Yr + b2*SI_3_Yr + b2*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c1*SI_1_Lft + c1*SI_2_Lft + c2*SI_3_Lft + c2*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr1Mth * t1
SI_3_Month | thr2Mth * t1
SI_4_Month | thr2Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr1Yr * t1
SI_3_Yr | thr2Yr * t1
SI_4_Yr | thr2Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr1L * t1
SI_3_Lft | thr2L * t1
SI_4_Lft | thr2L * t1
'
SIthreshold2.mod.res <- cfa(SIthreshold2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIthreshold2.mod.res, fit=T)
anova(SIloading2.mod.res, SIthreshold2.mod.res) #fit significant worse but just barely
SIthreshold2.mod.res <- cfa(SIthreshold2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIthreshold2.mod.res, fit=T)
anova(SIloading2.mod.res, SIthreshold2.mod.res) #fit significant worse but just barely
?cv_regsem
library(regsem)
library(ISLR)
library(regsem)
data(College)
#select only public schools
College1 = College[which(College$Private=="No"),]
#select and standardize variables of interest
Data = data.frame(scale(College1[c(3,4,9:12,15,17)]))
#lavaan model with all mediators
model1 <-
'# direct effect (c_prime)
Enroll ~ c_prime*Accept
# mediators
#a paths
Outstate ~ a1*Accept
Room.Board ~ a2*Accept
Books ~ a3*Accept
Personal ~ a4*Accept
S.F.Ratio ~ a5*Accept
Expend ~ a6*Accept
#b paths
Enroll ~ b1*Outstate + b2*Room.Board + b3*Books + b4*Personal + b5*S.F.Ratio + b6*Expend
# indirect effects (a*b)
a1b1: = a1*b1
a2b2: = a2*b2
a3b3: = a3*b3
a4b4: = a4*b4
a5b5: = a5*b5
a6b6: = a6*b6
#total effect (c)
c := c_prime + (a1*b1) + (a2*b2) + (a3*b3) + (a4*b4) + (a5*b5) + (a6*b6)'
#Actual Lavaan
fit.delta = sem(model1,data = Data,fixed.x = T)
#identify parameter numbers to penalize with pars_pen
extractMatrices(fit.delta)$A
#exploratory mediation analysis via regularization
#Stage 1
#find tuning parameter
# old/original call
fit.reg.tune = cv_regsem(model = fit.delta,type = "lasso",pars_pen = c(2:13),fit.ret = "BIC",n.lambda = 120,lambda.start = 0,jump = 0.005,multi.iter = 4,mult.start = FALSE,tol = 1e-6,fit.ret2 = "train",optMethod = "coord_desc",gradFun = "ram", warm.start = T,full = TRUE)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,n.lambda=50)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,n.lambda=50,tol=1e-6,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",warm.start=T,full=TRUE)
library(regsem)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,n.lambda=50,tol=1e-6,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",warm.start=T,full=TRUE)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01)
fit.reg.tune
library(regsem)
library(regsem)
library(regsem)
install.packages("roxygen2")
library(regsem)
install.packages("pkgbuild")
install.packages("semPlot")
install.packages("markdown")
grit.kev = read.csv("C:/Users/rjacobuc/Documents/GitHub/edm_book/ch10_Groups/semtree/data_kev.csv",header=T,sep=",")
grit.kev = read.csv("/Users/rjacobuc/Documents/GitHub/edm_book/ch10_Groups/semtree/data_kev.csv",header=T,sep=",")
colnames(grit.kev)
grit2 <- grit.kev[,c(3:14,31:92)]
grit2$familysize[grit2$familysize > 40] = NA
ind99 = grit2[,c(1:12,25:74)] == 0 & is.na(grit2[,c(1:12,25:74)]) ==F
grit2[,c(1:12,25:74)][ind99] <- NA
grit2$GS2  = 6 - grit2$GS2
grit2$GS3  = 6 - grit2$GS3
grit2$GS5  = 6 - grit2$GS5
grit2$GS7  = 6 - grit2$GS7
grit2$GS8  = 6 - grit2$GS8
grit2$GS11 = 6 - grit2$GS11
grit2 = data.matrix(grit2)
grit2[,74] = grit2[,74] - 2
grit3 = grit2[complete.cases(grit2),]
# take sample of 1000 for each
set.seed(1)
ids1 = sample(1:nrow(grit3),2000)
grit.train = grit3[ids1[1:1000],]
grit.test = grit3[ids1[1001:2000],]
grit.pop = grit3[-ids1,]
library(lavaan)
mod.grit <- "
grit =~ GS1+GS2+GS3+GS4+GS5+GS6+GS7+GS8+GS9+GS10+GS11+GS12
"
cfa.out = cfa(mod.grit,grit.train)
summary(cfa.out,fit=T)
library(psych)
parallel.out = fa.parallel(grit.train[,1:12])
fa.out = fa(grit.train[,1:12],2)
summary(fa.out)
fa.out$loadings
mod.grit2 <- "
grit1 =~ GS2+GS3+GS5+GS7+GS8+GS9+GS11
grit2 =~ GS1+GS4+GS6+GS8+GS9+GS10+GS11+GS12
"
cfa.out2 = cfa(mod.grit2,grit.train)
summary(cfa.out2,fit=T)
semPlot::semPaths(cfa.out2)
library(xtable)
xtable(inspect(cfa.out2, "est")$lambda)
fscore.train = lavPredict(cfa.out2)
fscore.test = lavPredict(cfa.out2,newdata=grit.test)
grit.train2 = data.frame(grit.train[,13:74])
grit.test2 = data.frame(grit.test[,13:74])
grit.train2$grit1 = fscore.train[,1]
grit.train2$grit2 = fscore.train[,2]
grit.test2$grit1 = fscore.test[,1]
grit.test2$grit2 = fscore.test[,2]
# use lm
lm.out <- lm(grit1 ~ .  -grit2, grit.train2)
summary(lm.out)
lm.out2 <- lm(grit2 ~ .  -grit1, grit.train2)
summary(lm.out2)
# train
cor(predict(lm.out,grit.train2),grit.train2$grit1)**2
cor(predict(lm.out2,grit.train2),grit.train2$grit2)**2
# test
cor(predict(lm.out,grit.test2),grit.test2$grit1)**2
cor(predict(lm.out2,grit.test2),grit.test2$grit2)**2
# try lasso to reduce
library(glmnet)
X.train = data.matrix(grit.train2[,1:62])
X.test = data.matrix(grit.test2[,1:62])
grit1.train = as.numeric(grit.train2$grit1)
grit2.train = as.numeric(grit.train2$grit2)
grit1.test = as.numeric(grit.test2$grit1)
grit2.test = as.numeric(grit.test2$grit2)
glmnet.out1 <- cv.glmnet(X.train,grit1.train)
glmnet.out2 <- cv.glmnet(X.train,grit2.train)
coef(glmnet.out1,s=glmnet.out1$lambda.1se)
cor(predict(glmnet.out1,X.train,s=glmnet.out1$lambda.1se),grit.train2$grit1)**2
cor(predict(glmnet.out2,X.train,s=glmnet.out2$lambda.1se),grit.train2$grit2)**2
cor(predict(glmnet.out1,X.test,s=glmnet.out1$lambda.1se),grit.test2$grit1)**2
cor(predict(glmnet.out2,X.test,s=glmnet.out2$lambda.1se),grit.test2$grit2)**2
# try SEM model
mimic.grit2 <- "
grit1 =~ GS2+GS3+GS5+GS7+GS8+GS9+GS11
grit2 =~ GS1+GS4+GS6+GS8+GS9+GS10+GS11+GS12
grit1 + grit2 ~ education+urban+gender+engnat+age+hand+religion+orientation+race+voted+married+familysize+
A1+A2+A3+A4+A5+A6+A7+A8+A9+A10+
C1+C2+C3+C4+C5+C6+C7+C8+C9+C10+
O1+O2+O3+O4+O5+O6+O7+O8+O9+O10+
E1+E2+E3+E4+E5+E6+E7+E8+E9+E10+
N1+N2+N3+N4+N5+N6+N7+N8+N9+N10
"
mimic.out2 = cfa(mimic.grit2,grit.train)
summary(mimic.out2,fit=T,rsquare=T)
library(semPlot)
semPaths(mimic.out2,exoVar=F,exoCov=F)
# get on test sample
partable1 = parTable(mimic.out2)
# only estimate residual variances
partable1$free = 0
partable1[151:170,]
partable1$free[152] = 1 # just the latent variable variance
partable1$free[153] = 1 # just the latent variable variance
est_mimic_test = cfa(partable1,grit.test)
summary(est_mimic_test,rsquare=T)
# use regsem and ridge to reduce parameter estimates
library(regsem)
cv.out <- cv_regsem(mimic.out2,type="lasso",mult.start=T,#fit.ret2="boot",#mult.start=T,
jump=.01,n.lambda=20,pars_pen=c("regressions"))
lasso1_200 <- readRDS("~/Documents/GitHub/edm_book/ch8_MLandSEM/scripts/lasso1_200.rds")
cv.out = lasso1_200
plot(cv.out,col="grey",lwd=1)
plot(cv.out$fits[cv.out$fits[,"conv"] == 0,"lambda"],
cv.out$fits[cv.out$fits[,"conv"] == 0,"BIC"],xlab="lambda",ylab="BIC")
plot(cv.out$fits[cv.out$fits[,"conv"] == 0,"lambda"],
cv.out$fits[cv.out$fits[,"conv"] == 0,"BIC"],xlab="Lambda",ylab="BIC")
partable2 = partable1
idd = which(cv.out$fits[,"conv"] == 0)
rsq1 = matrix(NA,20,2)
rsq2 = matrix(NA,20,2)
for(i in idd){
partable2[c(2:7,9:154),"est"] = cv.out$parameters[i,] # ridge1$final_pars
partable2$free[152] = 1 # just the latent variable variance
partable2$free[153] = 1 # just the latent variable variance
est_mimic_reg_train = cfa(partable2,grit.train)
summary(est_mimic_reg_train,rsquare=T)
rsq1[i,1] = lavInspect(est_mimic_reg_train,"rsquare")[13]
rsq2[i,1] = lavInspect(est_mimic_reg_train,"rsquare")[14]
# test
est_mimic_reg_test = cfa(partable2,grit.test)
summary(est_mimic_reg_test,rsquare=T)
rsq1[i,2] = lavInspect(est_mimic_reg_test,"rsquare")[13]
rsq2[i,2] = lavInspect(est_mimic_reg_test,"rsquare")[14]
}
plot(cv.out$fits[idd,"lambda"],rsq2[idd,1],type="l",ylim=c(.6,.7),xlab="lambda",ylab="R-Squared")
lines(cv.out$fits[idd,"lambda"],rsq2[idd,2],lty=2)
plot(cv.out$fits[idd,"lambda"],rsq2[idd,1],type="l",ylim=c(.6,.7),xlab="Lambda",ylab="R-Squared")
lines(cv.out$fits[idd,"lambda"],rsq2[idd,2],lty=2)
plot(cv.out$fits[idd,"lambda"],rsq2[idd,1],type="l",ylim=c(.6,.7),xlab="Lambda",ylab="R-Squared")
lines(cv.out$fits[idd,"lambda"],rsq2[idd,2],lty=2)
plot(cv.out$fits[idd,"lambda"],rsq2[idd,1],type="l",ylim=c(.6,.7),xlab="Lambda",ylab="R-Squared")
lines(cv.out$fits[idd,"lambda"],rsq2[idd,2],lty=2)
plot(cv.out$fits[idd,"lambda"],rsq1[idd,1],type="l",ylim=c(.35,.55),xlab="Lambda",ylab="R-Squared")
lines(cv.out$fits[idd,"lambda"],rsq1[idd,2],lty=2)
plot(cv.out$fits[idd,"lambda"],rsq1[idd,1],type="l",ylim=c(.35,.55),xlab="Lambda",ylab="R-Squared")
lines(cv.out$fits[idd,"lambda"],rsq1[idd,2],lty=2)
cv.out <- cv_regsem(mimic.out2,type="lasso",mult.start=T,#fit.ret2="boot",#mult.start=T,
jump=.01,n.lambda=20,pars_pen=c("regressions"))
cv.out
summary(cv.out)
library(regsem)
install.packages("ISLR")
install.packages("snowfall")
install.packages("caret")
library(regsem)
library(regsem)
library(regsem)
x="cvregsem"
inherits(x)
?inherits
isa(x,"string")
isa(x,"cvregsem")
inherits(x,"cvregsem")
x
class(x)
class(x) = "cvregsem"
x
inherits(x,"cvregsem")
inherits(x,"cvregsem")
inherits(x,"cvregsem")==F
Start=5
inherits(Start,"numeric")
library(regsem)
library(regsem)
library(regsem)
