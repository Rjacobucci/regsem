f =~ 1*x1 + x2 + x3 + x4 + x5 + x6 + *x7 + x8 + x9
x1 ~~ r1*x2;x1 ~~ r2*x3;x1 ~~ r3*x4;x1 ~~ r4*x5
'
outt = cfa(mod, HS)
mod <- '
f =~ 1*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9
x1 ~~ r1*x2;x1 ~~ r2*x3;x1 ~~ r3*x4;x1 ~~ r4*x5
'
outt = cfa(mod, HS)
# check parameter numbers
extractMatrices(outt)["A"]
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=20,p=0.9,type="lasso", p.method="bic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=20,p=0.9,type="lasso", p.method="bic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
summary(outt)
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=20,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=15,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
stabsel.out
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,n.lambda=5,n.lambda=20,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.lambda=5,n.lambda=20,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.lambda=20,n.lambda=5,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.nlambda=20,n.lambda=5,
n.boot=3,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
stabsel.out
#with user specified range and threshold:
stabsel.out = stabsel(data=HS,model=mod,det.range=T,detr.nlambda=20,n.lambda=5,
n.boot=10,p=0.9,type="alasso", p.method="aic",
pars_pen=c("r1","r2","r3","r4"))
stabsel.out$selection_results
library(regsem)
library(regsem)
library(regsem)
load("C:/Users/rjacobuc/Desktop/timeseries.Rdata")
library(lavaan)
library(regsem)
library(psych)
#### Now test it using the time series data generated by a unified SEM model
#load(file = "~/timeseries.Rdata")
hybrid.mod <-  "
V6  ~ V1 + V2 + V3 + V4 + V5      + V7 + V8 + V9 + V10
V7  ~ V1 + V2 + V3 + V4 + V5 + V6      + V8 + V9 + V10
V8  ~ V1 + V2 + V3 + V4 + V5 + V6 + V7      + V9 + V10
V9  ~ V1 + V2 + V3 + V4 + V5 + V6 + V7 + V8      + V10
V10 ~ V1 + V2 + V3 + V4 + V5 + V6 + V7 + V8 + V9
V6 ~~ NA*V7 + NA*V8 + NA*V9 + NA*V10
V7 ~~ NA*V8 + NA*V9 + NA*V10
V8 ~~ NA*V9 + NA*V10
V9 ~~ NA*V10
"
lav.hybrid <-sem(hybrid.mod, Ind_data[[1]] , fixed.x=FALSE)
reg.out1 <- regsem(lav.hybrid,lambda = c(0.12,0.5),
pars_pen = list(c(2:10, 12:20, 22:30, 31:40, 42:45),  # regression beta coefficients in l1
c(46:55, 62:65, 67:69, 71:72, 74)))
library(regsem)
reg.out1 <- regsem(lav.hybrid,lambda = c(0.12,0.5),
pars_pen = list(c(2:10, 12:20, 22:30, 31:40, 42:45),  # regression beta coefficients in l1
c(46:55, 62:65, 67:69, 71:72, 74)))
library(regsem)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
?regsem
library(lavaan)
# put variables on same scale for regsem
HS <- data.frame(scale(HolzingerSwineford1939[,7:15]))
mod <- '
f =~ 1*x1 + l1*x2 + l2*x3 + l3*x4 + l4*x5 + l5*x6 + l6*x7 + l7*x8 + l8*x9
'
# Recommended to specify meanstructure in lavaan
outt = cfa(mod, HS, meanstructure=TRUE)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
library(regsem)
fit1 <- regsem(outt, lambda=0.05, type="lasso",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
.8*320
install.packages("RcppArmadillo")
library(regsem)
5/9
.555*86
install.packages("qpdf")
library(regsem)
library(qpdf)
library(regsem)
library(regsem)
library(regsem)
library(regsem)
load("C:/Users/rjacobuc/Downloads/SIinvarianceResults.RData")
##read in spss data
library(tidyverse); library(haven); library(lavaan)
summary(SIbaseline.mod.res, fit=T) #does not appear to be invariant
SIbaseline.mod <-'
pastMonth =~ NA*SI_1_Month + SI_2_Month + SI_3_Month + SI_4_Month
pastYear =~ NA*SI_1_Yr + SI_2_Yr + SI_3_Yr + SI_4_Yr
Lifetime =~ NA*SI_1_Lft + SI_2_Lft + SI_3_Lft + SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
#intercept fixed to 0; factor loadings and thresholds allowed to vary
SIbaseline.mod.res <- cfa(SIbaseline.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIbaseline.mod.res, fit=T) #does not appear to be invariant
summary(SIloading.mod.res, fit=T)
SIloading.mod <-'
pastMonth =~ a*SI_1_Month + a*SI_2_Month + a*SI_3_Month + a*SI_4_Month
pastYear =~ b*SI_1_Yr + b*SI_2_Yr + b*SI_3_Yr + b*SI_4_Yr
Lifetime =~ c*SI_1_Lft + c*SI_2_Lft + c*SI_3_Lft + c*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading.mod.res <- cfa(SIloading.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIloading.mod.res, fit=T)
SIloading.mod <-'
pastMonth =~ NA*SI_1_Month +a*SI_1_Month + a*SI_2_Month + a*SI_3_Month + a*SI_4_Month
pastYear =~ NA*SI_1_Yr + b*SI_1_Yr + b*SI_2_Yr + b*SI_3_Yr + b*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c*SI_1_Lft + c*SI_2_Lft + c*SI_3_Lft + c*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading.mod.res <- cfa(SIloading.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIloading.mod.res, fit=T)
SIloading.mod.res <- cfa(SIloading.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIloading.mod.res, fit=T)
#intercept fixed to 0; factor loadings and thresholds allowed to vary
SIbaseline.mod.res <- cfa(SIbaseline.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIbaseline.mod.res, fit=T) #does not appear to be invariant
modindices(SIbaseline.mod.res)
SIthreshold.mod <-'
pastMonth =~ NA*SI_1_Month +a*SI_1_Month + a*SI_2_Month + a*SI_3_Month + a*SI_4_Month
pastYear =~ NA*SI_1_Yr + b*SI_1_Yr + b*SI_2_Yr + b*SI_3_Yr + b*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c*SI_1_Lft + c*SI_2_Lft + c*SI_3_Lft + c*SI_4_Lft
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr1Mth * t1
SI_3_Month | thr1Mth * t1
SI_4_Month | thr1Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr1Yr * t1
SI_3_Yr | thr1Yr * t1
SI_4_Yr | thr1Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr1L * t1
SI_3_Lft | thr1L * t1
SI_4_Lft | thr1L * t1
'
SIthreshold.mod.res <- cfa(SIthreshold.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
SIthreshold.mod <-'
pastMonth =~ NA*SI_1_Month +a*SI_1_Month + a*SI_2_Month + a*SI_3_Month + a*SI_4_Month
pastYear =~ NA*SI_1_Yr + b*SI_1_Yr + b*SI_2_Yr + b*SI_3_Yr + b*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c*SI_1_Lft + c*SI_2_Lft + c*SI_3_Lft + c*SI_4_Lft
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month | thr1Mth * t1
SI_2_Month | thr1Mth * t1
SI_3_Month | thr1Mth * t1
SI_4_Month | thr1Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr1Yr * t1
SI_3_Yr | thr1Yr * t1
SI_4_Yr | thr1Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr1L * t1
SI_3_Lft | thr1L * t1
SI_4_Lft | thr1L * t1
'
SIthreshold.mod.res <- cfa(SIthreshold.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIthreshold.mod.res, fit=T)
anova(SIthreshold.mod.res, SIloading.mod.res) #fits much worse than just the loading invariant model
anova(SIbaseline.mod.res, SIloading.mod.res) #fits significantly worse
### Model w/ seriously item constrained equal and non serious constrained equal
SIloading2.mod <-'
pastMonth =~ NA*SI_1_Month + a1*SI_1_Month + a1*SI_2_Month + a2*SI_3_Month + a2*SI_4_Month
pastYear =~ NA*SI_1_Yr + b1*SI_1_Yr + b1*SI_2_Yr + b2*SI_3_Yr + b2*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c1*SI_1_Lft + c1*SI_2_Lft + c2*SI_3_Lft + c2*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading2.mod.res <- cfa(SIloading2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
### Model w/ seriously item constrained equal and non serious constrained equal
SIloading2.mod <-'
pastMonth =~ NA*SI_1_Month + a1*SI_1_Month + a1*SI_2_Month + a2*SI_3_Month + a2*SI_4_Month
pastYear =~ NA*SI_1_Yr + b1*SI_1_Yr + b1*SI_2_Yr + b2*SI_3_Yr + b2*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c1*SI_1_Lft + c1*SI_2_Lft + c2*SI_3_Lft + c2*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr2Mth * t1
SI_3_Month | thr3Mth * t1
SI_4_Month | thr4Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr2Yr * t1
SI_3_Yr | thr3Yr * t1
SI_4_Yr | thr4Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr2L * t1
SI_3_Lft | thr3L * t1
SI_4_Lft | thr4L * t1
'
SIloading2.mod.res <- cfa(SIloading2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIloading2.mod.res, fit=T)
anova(SIbaseline.mod.res, SIloading2.mod.res) #fit not significantly worse than baseline
# loadings & thresholds  contrained w/in - w/o serious items
SIthreshold2.mod <- '
pastMonth =~ NA*SI_1_Month + a1*SI_1_Month + a1*SI_2_Month + a2*SI_3_Month + a2*SI_4_Month
pastYear =~ NA*SI_1_Yr + b1*SI_1_Yr + b1*SI_2_Yr + b2*SI_3_Yr + b2*SI_4_Yr
Lifetime =~ NA*SI_1_Lft + c1*SI_1_Lft + c1*SI_2_Lft + c2*SI_3_Lft + c2*SI_4_Lft
pastMonth ~~ 1*pastMonth
pastYear ~~ 1*pastYear
Lifetime ~~ 1*Lifetime
SI_1_Month ~ 0*1
SI_2_Month ~ 0*1
SI_3_Month ~ 0*1
SI_4_Month ~ 0*1
SI_1_Yr ~ 0*1
SI_2_Yr ~ 0*1
SI_3_Yr ~ 0*1
SI_4_Yr ~ 0*1
SI_1_Lft ~ 0*1
SI_2_Lft ~ 0*1
SI_3_Lft ~ 0*1
SI_4_Lft ~ 0*1
SI_1_Month | thr1Mth * t1
SI_2_Month | thr1Mth * t1
SI_3_Month | thr2Mth * t1
SI_4_Month | thr2Mth * t1
SI_1_Yr | thr1Yr * t1
SI_2_Yr | thr1Yr * t1
SI_3_Yr | thr2Yr * t1
SI_4_Yr | thr2Yr * t1
SI_1_Lft | thr1L * t1
SI_2_Lft | thr1L * t1
SI_3_Lft | thr2L * t1
SI_4_Lft | thr2L * t1
'
SIthreshold2.mod.res <- cfa(SIthreshold2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="theta")
summary(SIthreshold2.mod.res, fit=T)
anova(SIloading2.mod.res, SIthreshold2.mod.res) #fit significant worse but just barely
SIthreshold2.mod.res <- cfa(SIthreshold2.mod, data=datOrdered, ordered =
c("SI_1_Month", "SI_2_Month", "SI_3_Month", "SI_4_Month",
"SI_1_Yr", "SI_2_Yr", "SI_3_Yr", "SI_4_Yr",
"SI_1_Lft", "SI_2_Lft", "SI_3_Lft", "SI_4_Lft"),
parameterization="delta")
summary(SIthreshold2.mod.res, fit=T)
anova(SIloading2.mod.res, SIthreshold2.mod.res) #fit significant worse but just barely
?cv_regsem
library(regsem)
library(ISLR)
library(regsem)
data(College)
#select only public schools
College1 = College[which(College$Private=="No"),]
#select and standardize variables of interest
Data = data.frame(scale(College1[c(3,4,9:12,15,17)]))
#lavaan model with all mediators
model1 <-
'# direct effect (c_prime)
Enroll ~ c_prime*Accept
# mediators
#a paths
Outstate ~ a1*Accept
Room.Board ~ a2*Accept
Books ~ a3*Accept
Personal ~ a4*Accept
S.F.Ratio ~ a5*Accept
Expend ~ a6*Accept
#b paths
Enroll ~ b1*Outstate + b2*Room.Board + b3*Books + b4*Personal + b5*S.F.Ratio + b6*Expend
# indirect effects (a*b)
a1b1: = a1*b1
a2b2: = a2*b2
a3b3: = a3*b3
a4b4: = a4*b4
a5b5: = a5*b5
a6b6: = a6*b6
#total effect (c)
c := c_prime + (a1*b1) + (a2*b2) + (a3*b3) + (a4*b4) + (a5*b5) + (a6*b6)'
#Actual Lavaan
fit.delta = sem(model1,data = Data,fixed.x = T)
#identify parameter numbers to penalize with pars_pen
extractMatrices(fit.delta)$A
#exploratory mediation analysis via regularization
#Stage 1
#find tuning parameter
# old/original call
fit.reg.tune = cv_regsem(model = fit.delta,type = "lasso",pars_pen = c(2:13),fit.ret = "BIC",n.lambda = 120,lambda.start = 0,jump = 0.005,multi.iter = 4,mult.start = FALSE,tol = 1e-6,fit.ret2 = "train",optMethod = "coord_desc",gradFun = "ram", warm.start = T,full = TRUE)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,n.lambda=50)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,n.lambda=50,tol=1e-6,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",warm.start=T,full=TRUE)
library(regsem)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01,multi.iter=4,mult.start=TRUE,lambda.start=0,n.lambda=50,tol=1e-6,fit.ret=c("BIC"),fit.ret2="train",optMethod="coord_desc",gradFun="ram",warm.start=T,full=TRUE)
# updated from google group
fit.reg.tune = cv_regsem(fit.delta,type="lasso",pars_pen = c(2:13),jump=0.01)
fit.reg.tune
library(regsem)
library(regsem)
